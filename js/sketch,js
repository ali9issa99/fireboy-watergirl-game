let drawing = [];
let currentPath = [];
let isDrawing = false;
let currentColor = {
  name: '', // Will be set based on user input ('red' or 'blue')
  r: 0,
  g: 0,
  b: 0
};
let instructionsVisible = true;
let buttonsVisible = false; // Initially hide buttons

let restartButton, darkerButton, lighterButton, finishButton; // Declare button variables

function setup() {
  createCanvas(400, 400);
  background(255);
  
  // Instructions at the start
  textSize(18);
  textAlign(CENTER, CENTER);
  fill(0);
  text('Press R for Red\nPress B for Blue', width / 2, height / 2);
}

function draw() {
  if (!instructionsVisible) {
    background(255);  // Clear the canvas and redraw everything
    noFill();
    for (let i = 0; i < drawing.length; i++) {
      let path = drawing[i];
      stroke(path.color.r, path.color.g, path.color.b);
      strokeWeight(4);
      beginShape();
      for (let j = 0; j < path.points.length; j++) {
        vertex(path.points[j].x, path.points[j].y);
      }
      endShape();
    }
    
    // Display instructions once
    if (drawing.length === 0) {
      textSize(18);
      textAlign(CENTER, CENTER);
      fill(0);
      text('Draw your character', width / 2, 20);
    }
    
    // Show buttons if they are visible
    if (buttonsVisible) {
      restartButton.show();
      darkerButton.show();
      lighterButton.show();
      finishButton.show();
    }
  } else {
    // Show instructions until a color is chosen
    background(255);
    textSize(18);
    textAlign(CENTER, CENTER);
    fill(0);
    text('Press R for Red\nPress B for Blue', width / 2, height / 2);
  }
}

function keyPressed() {
  if (instructionsVisible) {
    if (key === 'r' || key === 'R') {
      currentColor.name = 'red';
      currentColor.r = 255;
      currentColor.g = 0;
      currentColor.b = 0;
      instructionsVisible = false;
      buttonsVisible = true; // Show buttons after color selection
      clearInstructions();
      setupButtons(); // Setup buttons after color selection
    } else if (key === 'b' || key === 'B') {
      currentColor.name = 'blue';
      currentColor.r = 0;
      currentColor.g = 0;
      currentColor.b = 255;
      instructionsVisible = false;
      buttonsVisible = true; // Show buttons after color selection
      clearInstructions();
      setupButtons(); // Setup buttons after color selection
    }
  }
}

function clearInstructions() {
  background(255);
  textSize(18);
  textAlign(CENTER, CENTER);
  fill(0);
  text('Draw your character', width / 2, 20);
}

function mousePressed() {
  if (!instructionsVisible) {
    isDrawing = true;
    currentPath = {
      points: [],
      color: {
        r: currentColor.r,
        g: currentColor.g,
        b: currentColor.b
      }
    };
    drawing.push(currentPath);
  }
}

function mouseReleased() {
  isDrawing = false;
}

function mouseDragged() {
  if (!instructionsVisible && isDrawing) {
    let point = {
      x: mouseX,
      y: mouseY
    };
    currentPath.points.push(point);
  }
}

function setupButtons() {
  // Setup buttons only after color selection
  restartButton = createButton('Restart Sketch');
  restartButton.position(width - 100, height - 110);
  restartButton.mousePressed(restartSketch);
  restartButton.hide(); // Initially hide the button
  
  darkerButton = createButton('Darker');
  darkerButton.position(width - 100, height - 80);
  darkerButton.mousePressed(chooseDarker);
  darkerButton.hide(); // Initially hide the button
  
  lighterButton = createButton('Lighter');
  lighterButton.position(width - 100, height - 50);
  lighterButton.mousePressed(chooseLighter);
  lighterButton.hide(); // Initially hide the button
  
  finishButton = createButton('Finish');
  finishButton.position(width - 100, height - 20);
  finishButton.mousePressed(finishDrawing);
  finishButton.hide(); // Initially hide the button
}

function restartSketch() {
  drawing = [];
  background(255);
  instructionsVisible = true;
  buttonsVisible = false; // Hide buttons after restarting sketch
  setup(); // Reset the setup to re-display instructions
}

function chooseDarker() {
  currentColor = {
    name: currentColor.name,
    r: max(0, currentColor.r - 20),
    g: max(0, currentColor.g - 20),
    b: max(0, currentColor.b - 20)
  };
}

function chooseLighter() {
  currentColor = {
    name: currentColor.name,
    r: min(255, currentColor.r + 20),
    g: min(255, currentColor.g + 20),
    b: min(255, currentColor.b + 20)
  };
}

function finishDrawing() {
  // Save the canvas as a base64 string
  let canvas = document.querySelector('canvas');
  let dataURL = canvas.toDataURL('image/png');
  localStorage.setItem('characterImage', dataURL); // Store the image in localStorage

  // Call the function to load the image into Phaser
  window.loadCustomCharacter();
}
